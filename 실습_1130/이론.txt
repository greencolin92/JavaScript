* 빠르게 실행결과 보기 위해 콘솔창에 입력하는 방법
크롬 주소창에 about:blank 입력
우클릭 - 검사 - 콘솔 탭

* 문장 맨 끝에 항상 ; 입력하기

사용자의 입력값 받기
- prompt(); 함수
- 입력 시 콘솔창에 값 나타남

알림창으로 출력
- alert(); 함수
- 보여줄 값이 없기 때문에 콘솔창에 undefined

웹 브라우저 창에 출력
- document.write(); 함수
- 브라우저 창에 출력되기 때문에 콘솔 창에 undefined

콘솔 창에 출력하기
- console.log();

변수 선언
var 변수명

변수(변하는 수) vs 상수(고정값)
* 변수를 쓸 때 주의사항
1) 의미있는 명 사용
2) 공백 X
3) 두개의 변수 이어서 쓸 때, 두번째 단어의 첫글자는 대문자
   abcDefg

[var pi=3.14159265;

var pi;
pi=3.14159265;

두가지 작성방법의 결과 같음]


* 자료형
1. 기본형
- number (숫자형)
  var birthYear = 2000;
  typeof birthYear;
  > 'number'
 변수 선언 후 해당 변수에 맞는 type 출력
- string (문자형)
  ""를 입력하면 숫자도 문자로 받아들임
- boolean (논리형)
  typeof true;
  typeof false;
  > 'boolean'
- undefined
- null
2. 복합형
- array(배열) : 하나의 변수에 여러 값을 저장하는 유형
  var 변수=["값1", "값2", "값3"]
  변수[0]
  > '값1'
- object(객체) : 함수와 속성이 함께 포함된 유형
var 변수={
키:"값1",
키:"값2",
키:숫자값}
typeof 변수
> object


* 연산자
사칙연산자  +-/*
나머지 연산자  5%2=1
증감 연산자
- 증가 : ++
- 감소 : --

증감연산자
피연산자 ++ : 전체 수식의 처리가 끝난 다음에 적용
++피연산자 : 전체 수식을 처리하기 전에 적용


할당 연산자
(1) +=   예) y += x -> y=y+x
(2) -=   예) y -= x -> y=y-x
(3) *=   예) y *= x -> y=y*x
(4) /=   예) y /= x -> y=y/x
(5) %=   예) y %= x -> y=y%x


var x=10
x+=10
x=10+x
x=10+10
x=20

var y=20
y += x
y=y+x
y=20+20
y=40


더하기+
10+10 : 사칙 연산자
문자+문자 : 연결 연산자
                age + "살 입니다"

숫자형 + 문자형
 - 숫자 문자 나란히 표기 (연결연산자)
숫자형 - 문자형(숫자)
 - 계산되어 나옴


==같다
 자동으로 자료형을 변환하여 비교
 10=="10"
 > true
===같다
 두 자료형 변환을 허용하지 않음
 10==="10"
 > false


* 제어문
- 조건문
  if문, if....else문, switch문
- 반복문
  for, 중첩 for, while, do....while
  break, continue

1. if문
if(조건){
맞았을 때 보여줄 값
}
(틀리면 그냥 끝남)

2. if....else문
작성방법1
if(조건){
문장1
}else{
문장2
}

작성방법2
if(조건){
문장1
}
else{
문장2
}

작성방법3
if(조건)
문장1
else
문장2

작성방법4
if(조건) 문장1
else 문장2

3. 중첩if문
방법1
if(조건){
문장1
}else{if(조건식){
	문장2
      }else{if(조건식){
	문장3
          }else{
	문장4
	}
        }
}

방법2
if(조건식){
문장1
} else if(조건식){
문장2
} else if(조건식){
문장3
} else{
문장4
}

* switch문
switch(조건){
 case :    ;
 break;  (입력한 값을 만나면 다음으로 넘어가지 않고 멈추면 됨)
default  (그 외에 다른 값 입력했을 시)


* 반복문
for문
for(카운트 변수; 조건식; 증감연산자){
	반복할 소스
}

while문
do...while문
- 문장을 한 번 실행한 후 조건을 확인

반복을 건너뛰거나 멈추기
break문 : 반복문 종료
             break가 있는 지점에 오면 반복문 종료
continue문 : 주어진 조건에 맞는 값을 만났을 때 실행하던 반복문장을 건너뛰고 반복문 맨 앞으로 되돌아갈 때


for문 : 카운트 변수를 기준으로 명령(반복소스)을 반복하기 때문에 횟수가 정해져있는 형태
while문 : 특정 조건을 만족하는 동안에만 실행





















